This is a graph problem involving the cheapest weighted edges which are also bidirectional.

We can use Kruskal's algorithm and a minimum spanning tree.

First thoughts:
0. Sort edges by cost.
1. Pick the minimum weight pipe (edge).
2. Adding the wells
    a. Compare the cost of the two wells
    b. Add the cheaper well to the MST
    c. If the pipe (edge) is less than the well in the second house
        i. add the pipe
    d. else
        i. add the well to the second node
WAIT SCRATCH THIS IDEA^


GEEKSFORGEEKS there's something involving union
The main idea for this solution is to treat the wells in a house like an edge
    - this can be done by creating a dummy node which links to the other nodes with edges being weighted the cost of the well

Implementation:
    Variables:
        int n = houses
        int i = houseNumber
        int[] wells = wells[i - 1]
        int[] pipes = pipes[j]
            pipes[j] = [house1j, house2j, costj]

n = 2, wells = [1,1], pipes = [[1,2,1],[1,2,2]]
