1. 
T(N) = 2T(N-1) + 1
Master Theorem for "decreasing" function
a = 2, b = 1, f(n) = 1
T(n) = O(f(n)^k * a^(n/b))
T(n) = O(1^k * 2^n)    
T(n) = O(2^n)      // <--- ANSWER

Algebraic work:
1. T(N) = 2T(N-1) + 1
2. T(N-1) = (2T(N-2) + 1)
3. T(N-2) = 2T(N-3) + 1

T(N) = 2(2(2T(N-3) + 1) + 1) + 1
T(N) = 4(2T(N-3) +2) + 2) + 1
T(N) = 8T((N-3)+4) + 2 + 1
T(N) = 2^3 T(N-3) + 2^2 + 2^1 + 2^0
using k
T(N) = 2^k T(N-k) + 2^(k-1) + 2^(k-2) + ... + 2^1 + 2^0
                    these values are constants, which when scaled to infinity are negligible
let's assume n-k = 0 and T(0) = 1
T(N) = 2^k T(N-k) + C
T(N) = 2^k T(0)
T(N) = 2^k          // <--- Work checked



2. 
T(N) = 3T(N-1) + n
Master Theorem for "decreasing" function
a = 3, b = 1, f(n) = n
Case 3: a > 1
T(n) = O(n * 3^n)    // <--- ANSWER

Algebraic work
1. T(N) = 3T(N-1) + n
2. T(N-1) = 3T(N-2) + n
3. T(N-2) = 3T(N-3) + n
sub all values into T(N)
T(N) = 3(3(3T(N-3) + n) + n) + n
T(N) = 9(3T(N-3) + 3n) + 3n) + n
T(N) = 27T(N-3) + 9n + 3n + n
T(N) = 3^3T(N-3) + 3^(2)*n + 3^(1)*n + 3^(0)*n
apply k logic
T(N) = 3^kT(N-k) + 3^(k-1)*n + 3^(k-2)*n + ... + 3^1*n + 3^0*n
Assume N-k = 0, and T(0) = 1
N = k
T(N) = 3^kT(0) + 3^(k)*n
T(N) = 3^k*1 + 3^k * n
T(N) = 3^k + 3^k*n
        ^ this value is negligible when scaled to infinity
Θ(3^k * n)             // <--- checked answer

GOOD UP TO HERE



3. 
T(N) = 9T(N/2) + n^2
divide and conquer function
a = 9, b = 2, f(n) = n^2
Let's calculate n^log_b(a)       // This is the same as n^(log base 2 of 9)
log 9 / log 2 = 3.169 ~ 3.17
log_b(a) = n^3.17                // where does this stand against f(n)?

n^(3.17 - e) = n^2    //Now we realize this is Case 1
e = 1.17  
T(n) = Θ(f(n)) 
T(n) = Θ(n^(2 + 1.17))      
T(n) = Θ(n^(3.17)            // <--- ANSWER

Algebra
T(N) = 9T(N/2) + n^2



THIS GUY WILL SAVE ME
https://www.youtube.com/watch?v=XcZw01FuH18&t=326s&ab_channel=AbdulBari



4. 
T(N) = 100T(N/2) + n^(log_2cn + 1)  (c is a constant) (since c is a constant, we can just call it cn = n for large values)
divide and conquer function
a = 100, b = 2, f(n) = n^(log_2(n) + 1)  n to the power of log base 2 of c*n + 1
Calculate n^logb(a)
n^(log_2(100) + e)   vs n^(log_2(n) + 1)    
n^(log_2(cn) + 1) is greater
if the second one is greater, then that means that you have to add an e value to keep the two equations equal
therefore
// not sure about this ----------------------------------------
T(n) = Θ(n^(log_2(cn) + 1)
//-------------------------------------------------------------
Recursion Tree Method



5.
T(N) = 4T(N/2) + n^2*logn
a = 4, b = 2, f(n) = n^2*log(n)
n^(log_2(4)) = n^2
n^2 vs n^2*logn
n^2 < n^2*logn
what makes these two values equal?
n^(2 + e) = n^2 * log(n)
the LHS would need some additional e value to be equal to the value of the RHS
therefore
T(n) = Θ(n^2*logn)


Recursion Tree Method



6. 
T(N) = 5T(N/2) + n^(2)/log(n)
a = 5, b = 2, f(n) = n^2 / log(n)
n^(log_2(5)) vs n^2 / log(n)
n^2.32       vs log (n^2 / log(n))
n^2.32       vs 2log(n) - log(log(n))
n^2.32 > 2log(n)
The LHS would need 
T(n) = n^2.32


