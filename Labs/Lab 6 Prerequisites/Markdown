graph problem. idea is to use DFS and topological sort.
Using DFS we have a starting point (the course we want to take)
and we have the next node (the prerequisite)
Then we check if the prerequisite has any further prerequisites.

Basically our goal is to make sure that a prereq for a class does not also have a prereq by using topological sort

Input: numCourses = 2, prerequisites = [[1,0]]
Want to take Course 1
Check for prereq Course 0
Check if Course 0 has any prerequisites
It does not so it is possible

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
1 --> 0
0 --> 1
1 is required to take 0 but 0 is required to take 1, so it is impossible
in DFS 1 is already placed in visited, so if a prereq points to it return false


TOPOLOGICAL SORT
1. Create the adjacency matrix
  a. 2d adjacency list
  b. have indegree for each associated course
2. add all nodes with in-degree 0 to a queue
3. While the queue is not empty perform the following actions
  a. remove a node from the queue
  b. for each outgoing edge from the node, decrement the in-degree of destination node by 1
  c. if the in-degree of a destination node becomes 0, add it to the queue
If it is not able to do this then that means that the prerequisite chain has a cycle
