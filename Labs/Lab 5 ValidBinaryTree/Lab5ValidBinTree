class Solution(object):
    def isValidBST(self, root):
        if root is None:
            return True
        if root.left is not None:
            if root.left.val > root.val:
                return False
        
        if root.right is not None:
            if root.right.val < root.val:
                return False
        
        return self.isValidBST(root.left) and self.isValidBST(root.right)
    
  
class TreeNode(object):

    def __init__(self, val=0, left=None, right=None):

        self.val = val

        self.left = left

        self.right = right
        
        
solution = Solution()

root1 = TreeNode(4)
root1.left = TreeNode(3)
root1.left.left = TreeNode(1)
root1.right = TreeNode(8)
root1.right.left = TreeNode(5)
root1.right.right = TreeNode(9)
print(solution.isValidBST(root1))

root2 = TreeNode(1)
root2.left = TreeNode(2)
root2.left.left = TreeNode(3)
root2.left.right = TreeNode(4)
root2.right = TreeNode(8)
root2.right.left = TreeNode(5)
root2.right.right = TreeNode(6)
print(solution.isValidBST(root2))
