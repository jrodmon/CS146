How to find the correct amount of change in the least amount of coins

Solve using bottom-up approach

Test Case 1:
Input: coins = [1,2,5], amount = 11 
Output: 3 
Explanation: 11 = 5 + 5 + 1

Dynamic Programming bottom-up approach
1. we want to calculate the least number of coins for each value all the way up to until the amount
2. then we store the least amount of coins for a particular value and reuse it in sequential values

dp[0] = 0 coin

(dp[1] = 1 coin + dp[1])            // dp[(the original value we calculate for - the value of the 1 coin)]
dp[1] = 1 coin + dp[0] = 1 coin

dp[2] = 1 coin + dp[2 - 1] = 1 coin + dp[1] = 2 coins  //we know that dp[1] takes 1 coin to make
      = 1 coin + dp[2 - 2] = 1 coin + dp[0] = 1 coin   // we found a new optimal solution
      = 1 coin + dp[2 - 3] = 1 coin + dp[-1] = null    
      = 1 coin + dp[2 - 5] = 1 coin + dp[-3] = null    // check if we can find a better amount of coins for all coin values

dp[3] = 1 coin + dp[3 - 1] = 1 coin + dp[2] = 1 coin + 1 coin = 2 coins
                                        ^reuse the optimal amount of coins that we calculated from dp[2]

Repeat this whole process until we reach the target amount


PSEUDOCODE
    1. declare dynamic Programming array dp of size amount+1 with each element being set to an unreachable value [amount+1]
    2. declare that dp[0] = 0 coins 
    3. calculate all values in the dp array
        a. for every value i leading up to the targetAmount (11)
            b. for all possible coinValue
                c. if value i - coinValue is greater than 0
                    d. set dp[i] = min between dp[i] and dp[i - coinValue]      //chooses the least amount of coins

    if the dp[i] == amount + 1      // if the initially declared amount was not overridden, we could not find a solution
        return -1
    else
      return dp[amount]
